class Task:
    task_id=0
    def __init__(self,description,priority):
        self.__description=description
        self.__priority=priority
        self.__completed=False
        self.__next=None
        Task.task_id+=1
        self.id=Task.task_id
    def getDescription(self):
        return self.__description
    def setDescription(self,description):
        self.__description=description
    def getPriority(self):
        return self.__priority
    def setPriority(self,priority):
        self.__priority=priority
    def getCompleted(self):
        return self.__completed
    def setCompleted(self,completed):
        self.__completed=completed
    def getNext(self):
        return self.__next
    def setNext(self,new_next):
        self.__next=new_next
class TaskManager:
    def __init__(self):
        self.header=None
        self.size=0
    def task_queue(self,description,priority):
        t=Task(description,priority)
        print(t.id)
        if self.size==0:
            self.header=t
            self.size+=1
        else:
            if (t.getPriority() > self.header.getPriority()):
              t.setNext(self.header)
              self.header = t
              self.size += 1
            else:
              current=self.header
              previous=current
              while current!=None and current.getPriority()>=t.getPriority():
                  previous=current
                  current=current.getNext()
              previous.setNext(t)
              t.setNext(current)
              self.size+=1
    def findId(self,user_id):
        if taskm.size!=0:
            current=self.header
            o_id=current.id
            while current!=None:
                if(o_id==user_id):
                    break
                #print("?")
                current=current.getNext()
                if current!= None:
                    o_id=current.id
            if o_id==user_id:
                print("Task"+str(user_id)+":",current.getDescription())
            else:
                print('id was not found')
        else:
            print("Task manger is empty!")
    def displaying_all_tasks(self):
        current=self.header
        counter=1
        while current!=None:
            print("Task"+str(counter)+" description is:",current.getDescription())
            counter+=1
            current=current.getNext()
    def false_completed(self):
        current=self.header
        a=''
        while current!=None:
            if current.getCompleted()==False:
                a=a+' '+str(current.getDescription())
            current=current.getNext()
        print(a,end='')
        if a=='':
            print('all task are true')
        else:
            print()
class History:
    def __init__(self):
      self.header = None
      self.size = 0
    def push(self, t:Task):
        if(taskm.size==0):
            print("Task manger is empty!")
        else:
            while t!=None:
                if t.getCompleted()!=True:
                    break
                t=t.getNext()
            if t!=None:
                t.next = self.header
                self.header = t
                self.size += 1
                print(t.getDescription())
                t.setCompleted(True)
            else:
                print('all are true')

print("""
1. Adding a new task to the task manager.
2. Getting a task from the queue given a task id
3. Marking the highest priority task as completed and putting
it in the task history.
4. Displaying all tasks in order of priority.
5. Displaying only the tasks that are not completed.
6. Displaying the last completed task.
7. Exit
""")
choice=""
taskm=TaskManager()
ht=History()
while(choice!="7"):
    choice= input("Enter a choice: ")
    if(choice=="1"):
        user_desc=input("Enter task description: ")
        user_prio=input("Enter task priority: ")
        taskm.task_queue(user_desc,user_prio)
    if(choice=="2"):
        user_id=input("Enter an ID: ")
        while not user_id.isnumeric():
            user_id=input("Enter a positive integer: ")
        taskm.findId(int(user_id))
    if(choice=="3"):
        ht.push(taskm.header)
    if(choice=="4"):
        taskm.displaying_all_tasks()
    if(choice=="5"):
        taskm.false_completed()
    if(choice=="6"):
        if ht.size!=0:
            print('the last completed task descreption is :',ht.header.getDescription())
        else:
            print('there is no completed task')
    if(choice=="7"):
        print('bye')
